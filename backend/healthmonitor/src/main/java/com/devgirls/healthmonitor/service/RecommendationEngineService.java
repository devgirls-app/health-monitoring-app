package com.devgirls.healthmonitor.service;

import com.devgirls.healthmonitor.entity.DailyAggregates;
import com.devgirls.healthmonitor.entity.HealthData;
import com.devgirls.healthmonitor.entity.Recommendations;
import com.devgirls.healthmonitor.entity.User;
import com.devgirls.healthmonitor.repository.DailyAggregatesRepository;
import com.devgirls.healthmonitor.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
public class RecommendationEngineService {

    private final RecommendationsService recommendationsService;
    private final DailyAggregatesRepository dailyAggregatesRepository;
    private final UserRepository userRepository;

    public RecommendationEngineService(RecommendationsService recommendationsService,
                                       UserRepository userRepository, DailyAggregatesRepository dailyAggregatesRepository) {
        this.recommendationsService = recommendationsService;
        this.userRepository = userRepository;
        this.dailyAggregatesRepository = dailyAggregatesRepository;
    }

    public void analyzeAndGenerate(HealthData data) {
        String recommendationText = null;

        if (data.getHeartRate() != null && data.getHeartRate() > 120) {
            recommendationText = "‚ö†Ô∏è High heart rate detected. Try resting and staying hydrated.";
        } else if (data.getSteps() != null && data.getSteps() < 3000) {
            recommendationText = "üëü Low activity detected. Try walking at least 5000 steps today.";
        } else if (data.getSleepHours() != null
                && data.getSleepHours().compareTo(BigDecimal.valueOf(5)) < 0) {
            recommendationText = "üò¥ You slept less than 5 hours. Aim for 7‚Äì8 hours of rest.";
        }

        if (recommendationText != null) {
            Recommendations rec = new Recommendations();
            rec.setRecommendationText(recommendationText);
            rec.setSource("RuleEngine");

            // Use data.getUser() instead of dto.getUserId()
            User user = data.getUser();
            if (user != null) {
                rec.setUser(user);
            }

            recommendationsService.save(rec);

            System.out.println("‚úÖ Generated recommendation for user " +
                    (user != null ? user.getUserId() : "Unknown") + ": " + recommendationText);
        }
    }

    public void evaluate(DailyAggregates agg) {
        if (agg == null) return;

        Long userId = agg.getUser() != null ? agg.getUser().getUserId() : agg.getUserId();
        if (userId == null) return;

        // --- –ü—Ä–∞–≤–∏–ª–æ #1: –º–∞–ª–æ —Å–Ω–∞ + –≤—ã—Å–æ–∫–∏–π z-HR ---
        if (agg.getSleepHoursTotal() != null && agg.getZHrMean() != null
                && agg.getSleepHoursTotal().doubleValue() < 6.0
                && agg.getZHrMean().doubleValue() > 0.8) {

            recommendationsService.create(
                    userId,
                    "–°–æ–Ω –Ω–∏–∂–µ –Ω–æ—Ä–º—ã –∏ –ø—É–ª—å—Å –≤—ã—à–µ ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ 10-–º–∏–Ω –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –ª–æ–∂–∏—Ç–µ—Å—å —Ä–∞–Ω—å—à–µ.",
                    "rules",
                    "warning"
            );
        }

        // --- –ü—Ä–∞–≤–∏–ª–æ #2: –¥–≤–∞ –¥–Ω—è –ø–æ–¥—Ä—è–¥ < 3000 —à–∞–≥–æ–≤ ---
        Integer todaySteps = agg.getStepsTotal() != null ? agg.getStepsTotal() : 0;
        Integer yesterdaySteps =
                dailyAggregatesRepository.findStepsTotal(userId, agg.getDate().minusDays(1));

        if ((agg.getStepsTotal() != null && agg.getStepsTotal() < 3000)
                && (yesterdaySteps != null && yesterdaySteps < 3000)) {
            recommendationsService.create(
                    userId,
                    "–î–≤–∞ –¥–Ω—è –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å 15‚Äì20 –º–∏–Ω—É—Ç –ª—ë–≥–∫–∏–º —à–∞–≥–æ–º.",
                    "rules",
                    "advisory"
            );
        }
    }
}
